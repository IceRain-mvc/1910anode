(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{304:function(s,a,t){"use strict";t.r(a);var n=t(28),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写"}},[s._v("#")]),s._v(" 重写")]),s._v(" "),t("h3",{attrs:{id:"_1、重写（override）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、重写（override）"}},[s._v("#")]),s._v(" 1、重写（override）")]),s._v(" "),t("ul",[t("li",[s._v("什么是重写：具有继承关系的两个类中，子类方法与父类方法，同名，同参，同类型，访问级别不能严于父类")]),s._v(" "),t("li",[s._v("为什么用重写：子类并不想原封不动地继承父类的方法，而是想作一定的修改，增强类的重用性和复用性\n重写的好处：让程序更健壮")])]),s._v(" "),t("h3",{attrs:{id:"_2、object类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、object类"}},[s._v("#")]),s._v(" 2、Object类")]),s._v(" "),t("ul",[t("li",[s._v("Object类是所有类的父类，")]),s._v(" "),t("li",[s._v("Object类被子类经常重写的方法\n"),t("ul",[t("li",[t("code",[s._v("toString()")]),s._v("  返回当前对象本身的有关信息，按字符串对象返回")]),s._v(" "),t("li",[t("code",[s._v("equals()")]),s._v("\t比较两个对象是否是同一个对象，是则返回true")]),s._v(" "),t("li",[t("code",[s._v("hashCode()")]),s._v("\t返回该对象的哈希代码值")]),s._v(" "),t("li",[t("code",[s._v("getClass()")]),s._v("\t获取当前对象所属的类信息，返回Class对象")])])])]),s._v(" "),t("h3",{attrs:{id:"_3、多态：同一个引用类型，使用不同的实例而执行不同操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、多态：同一个引用类型，使用不同的实例而执行不同操作"}},[s._v("#")]),s._v(" 3、多态：同一个引用类型，使用不同的实例而执行不同操作")]),s._v(" "),t("blockquote",[t("p",{staticStyle:{color:"#22a3e9","font-weight":"bold"}},[s._v("解析：同一个引用类型（一般都是父类），被不同的子类对象赋值，则执行具体子类对象的方法\n")])]),s._v(" "),t("p"),s._v(" "),t("h3",{attrs:{id:"_4、使用多态实现思路："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、使用多态实现思路："}},[s._v("#")]),s._v(" 4、使用多态实现思路：")]),s._v(" "),t("ul",[t("li",[s._v("1、编写父类")]),s._v(" "),t("li",[s._v("2、编写子类，子类要重写父类的方法，")]),s._v(" "),t("li",[s._v("3、运行时，使用父类的类型，子类的对象。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pet")]),s._v(" p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Dog")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_5、实现多态的两种形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、实现多态的两种形式"}},[s._v("#")]),s._v(" 5、实现多态的两种形式")]),s._v(" "),t("ul",[t("li",[s._v("1、使用父类作为方法形参实现多态（传递的参数类型不止一个类）")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toHospital")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pet")]),s._v(" pet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("             \n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wan")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Gou")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("2、使用父类作为方法返回值类型实现多态（返回值类型不止一个类）")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Pet")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getPet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" typeid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_6、实现多态的两个要素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、实现多态的两个要素"}},[s._v("#")]),s._v(" 6、实现多态的两个要素")]),s._v(" "),t("ul",[t("li",[s._v("1、子类重写父类的方法")]),s._v(" "),t("li",[s._v("2、使用父类的类型（参数/返回值）")])]),s._v(" "),t("h3",{attrs:{id:"_7、多态类型转换："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、多态类型转换："}},[s._v("#")]),s._v(" 7、多态类型转换：")]),s._v(" "),t("ul",[t("li",[s._v("1、向上转换：子类转换成父类 （满足自动类型转换）")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DongWu")]),s._v(" dw "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Gou")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"京巴"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小狗"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("2、向下转换：父类转换成子类（强制类型转换） 结合"),t("code",[s._v("instanceof")]),s._v("关键字一起使用")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("DongWu")]),s._v(" dw "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Gou")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     \n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("dw "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Gou")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Gou")]),s._v(" gou "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Gou")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("dw"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"_8、多态的好处："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8、多态的好处："}},[s._v("#")]),s._v(" 8、多态的好处：")]),s._v(" "),t("ul",[t("li",[s._v("1、减少代码的修改")]),s._v(" "),t("li",[s._v("2、提高代码的可扩展性")]),s._v(" "),t("li",[s._v("3、提高代码的可维护性")])]),s._v(" "),t("h3",{attrs:{id:"_9、instanceof-关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9、instanceof-关键字"}},[s._v("#")]),s._v(" 9、"),t("code",[s._v("instanceof")]),s._v(" 关键字")]),s._v(" "),t("ul",[t("li",[s._v("检查是否与指定的类型兼容")]),s._v(" "),t("li",[s._v("语法：对象 "),t("code",[s._v("instanceof")]),s._v("类型（要求：和对象有上下级关系的类型）")])]),s._v(" "),t("h3",{attrs:{id:"_10、面向对象三大特征："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10、面向对象三大特征："}},[s._v("#")]),s._v(" 10、面向对象三大特征：")]),s._v(" "),t("ul",[t("li",[s._v("核心体现出来的："),t("strong",[s._v("消除冗余代码")])]),s._v(" "),t("li",[t("strong",[s._v("封装")]),s._v("----就是创建不同的类")]),s._v(" "),t("li",[t("strong",[s._v("继承")]),s._v("----把不同的类中共有的提到一个父类中，子* 继承父类属性和方法，子类重写父类的方法")]),s._v(" "),t("li",[t("strong",[s._v("多态")]),s._v("----如何使用这些有继承关系的类")])])])}),[],!1,null,null,null);a.default=e.exports}}]);